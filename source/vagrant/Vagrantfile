# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require 'fileutils'

# Check required Vagrant plugins are properly installed
required_plugins = %W(vagrant-hostmanager)
required_plugins.each do |required_plugin|
  unless Vagrant.has_plugin?(required_plugin)
    raise <<-EOT
      #{required_plugin} is not installed!
      Please run the command "vagrant plugin install #{required_plugin}"
    EOT
  end
end

def provision_worker(worker, conf, p, shared_args)
  provisioning_name, provisioning_args = [p.keys, p.values].flatten

  # Specific variables
  if provisioning_args =~ /\$hostspec/
    hostspec = conf['hosts'].map do |hostname, params|
      "-H #{hostname}@#{params['ip']}"
    end.join(' ')

    provisioning_args.gsub!(/\$hostspec/, hostspec)
  end

  worker.vm.provision "shell",
    path: File.expand_path("../../install/provisioning_#{provisioning_name}.sh", __FILE__),
    args: "#{shared_args} #{provisioning_args || ''}"
end

# Begin Vagrant configuration. See https://docs.vagrantup.com for reference.
Vagrant.configure("2") do |config| 
  # Use a minimalist Debian box
  config.vm.box = "minimal/jessie64"

  # Some optimizations
  config.vm.provider "virtualbox" do |v|
    v.linked_clone = true
    v.memory = 2048
    v.cpus = 1
    v.customize ["modifyvm", :id, "--usb", "on"]
    v.customize ["modifyvm", :id, "--usbehci", "off"]
  end

  # Use hostmanager so we can refere to hosts from the host machine
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true

  # Load hosts
  conf = YAML.load_file(File.expand_path('../vagrant-hosts.yml', __FILE__))

  # Compute arguments comon to all hosts
  shared_args = conf['shared_args'] || ''

  # Deploy the shared provisioning script to the /vagrant shared folder
  FileUtils.cp(
    File.expand_path(File.join('..', conf['shared_script']), __FILE__),
    File.expand_path('..', __FILE__)
  )

  # Use "FORCE_PROVISION=yes vagrant provision" to re-run provisioning scripts
  # and reinstall everything
  if ENV['FORCE_PROVISION'] == 'yes'
    shared_args += ' -f'
  end
  
  conf['hosts'].each do |hostname, params|
    config.vm.define hostname do |worker|
      # Configure IP address
      worker.vm.network :private_network, :ip => params['ip']
      worker.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", params['memory']]
          vb.customize ["modifyvm", :id, "--cpus", params['cpus']]
      end
      # Configure hostname
      worker.vm.hostname = hostname
      # Run provisioning scripts as specified by the config
      (params['provision']['before'] || []).each do |p|
        provision_worker(worker, conf, p, shared_args)
      end
      conf['provisioning'].each do |p|
        provision_worker(worker, conf, p, shared_args)
      end
      (params['provision']['after'] || []).each do |p|
        provision_worker(worker, conf, p, shared_args)
      end
    end
  end

  # Disable automatic box update checking.
  # Run `vagrant box outdated` to check for updates.
  config.vm.box_check_update = false
end
